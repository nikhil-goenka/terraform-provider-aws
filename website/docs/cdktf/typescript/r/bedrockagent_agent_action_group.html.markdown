---
subcategory: "Agents for Amazon Bedrock"
layout: "aws"
page_title: "AWS: aws_bedrockagent_agent_action_group"
description: |-
  Terraform resource for managing an AWS Agents for Amazon Bedrock Agent Action Group.
---

<!-- Please do not edit this file, it is generated. -->
# Resource: aws_bedrockagent_agent_action_group

Terraform resource for managing an AWS Agents for Amazon Bedrock Agent Action Group.

## Example Usage

### Basic Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { BedrockagentAgentActionGroup } from "./.gen/providers/aws/bedrockagent-agent-action-group";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new BedrockagentAgentActionGroup(this, "example", {
      actionGroupExecutor: [
        {
          lambda:
            "arn:aws:lambda:us-west-2:123456789012:function:example-function",
        },
      ],
      actionGroupName: "example",
      agentId: "GGRRAED6JP",
      agentVersion: "DRAFT",
      apiSchema: [
        {
          s3: [
            {
              s3BucketName: "example-bucket",
              s3ObjectKey: "path/to/schema.json",
            },
          ],
        },
      ],
      skipResourceInUseCheck: true,
    });
  }
}

```

## Argument Reference

The following arguments are required:

* `actionGroupName` - (Required) Name of the action group.
* `agentId` - (Required) The unique identifier of the agent for which to create the action group.
* `agentVersion` - (Required) Version of the agent for which to create the action group. Valid values: `DRAFT`.
* `actionGroupExecutor` - (Required) ARN of the Lambda function containing the business logic that is carried out upon invoking the action or custom control method for handling the information elicited from the user. See [`actionGroupExecutor` block](#action_group_executor-block) for details.
* `apiSchema` - (Required) Either details about the S3 object containing the OpenAPI schema for the action group or the JSON or YAML-formatted payload defining the schema. For more information, see [Action group OpenAPI schemas](https://docs.aws.amazon.com/bedrock/latest/userguide/agents-api-schema.html). See [`apiSchema` block](#api_schema-block) for details.

The following arguments are optional:

* `actionGroupState` - (Optional) Whether the action group is available for the agent to invoke or not when sending an [InvokeAgent](https://docs.aws.amazon.com/bedrock/latest/APIReference/API_agent-runtime_InvokeAgent.html) request. Valid values: `ENABLED`, `DISABLED`.
* `description` - (Optional) Description of the action group.
* `parentActionGroupSignature` - (Optional) To allow your agent to request the user for additional information when trying to complete a task, set this argument to `AMAZON.UserInput`. You must leave the `description`, `apiSchema`, and `actionGroupExecutor` arguments blank for this action group. Valid values: `AMAZON.UserInput`.
* `skipResourceInUseCheck` - (Optional) Whether the in-use check is skipped when deleting the action group.

### `actionGroupExecutor` block

The `actionGroupExecutor` configuration block supports the following arguments:

* `lambda` - (Optional) ARN of the Lambda function containing the business logic that is carried out upon invoking the action.

### `apiSchema` block

The `apiSchema` configuration block supports the following arguments:

* `payload` - (Optional) JSON or YAML-formatted payload defining the OpenAPI schema for the action group.
* `s3` - (Optional) Details about the S3 object containing the OpenAPI schema for the action group. See [`s3` block](#s3-block) for details.

### `s3` block

The `s3` configuration block supports the following arguments:

* `s3BucketName` - (Optional) Name of the S3 bucket.
* `s3ObjectKey` - (Optional) S3 object key containing the resource.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

- `actionGroupId` - Unique identifier of the action group.
- `id` - Action group ID, agent ID, and agent version separated by `,`.

## Timeouts

[Configuration options](https://developer.hashicorp.com/terraform/language/resources/syntax#operation-timeouts):

* `delete` - (Default `120m`)

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Agents for Amazon Bedrock Agent Action Group using the action group ID, the agent ID, and the agent version separated by `,`. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { BedrockagentAgentActionGroup } from "./.gen/providers/aws/bedrockagent-agent-action-group";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    BedrockagentAgentActionGroup.generateConfigForImport(
      this,
      "example",
      "MMAUDBZTH4,GGRRAED6JP,DRAFT"
    );
  }
}

```

Using `terraform import`, import Agents for Amazon Bedrock Agent Action Group the action group ID, the agent ID, and the agent version separated by `,`. For example:

```console
% terraform import aws_bedrockagent_agent_action_group.example MMAUDBZTH4,GGRRAED6JP,DRAFT
```

<!-- cache-key: cdktf-0.20.1 input-a1618896b4de19ba3c7b57bb9d0b7894c4b4df710d25f659966ff6f1d38fb5a2 -->